const { GoogleGenerativeAI } = require('@google/generative-ai');
const config = require('../config');
const axios = require('axios');
const fetch = require('node-fetch');
const { fileTypeFromBuffer } = require('file-type');
const FormData = require('form-data');

const createSuccessResponse = (data, modelUsed, logicUsed) => ({
  success: true,
  creator: "Parhan cina",
  data,
  metadata: {
    modelUsed,
    logicUsed: logicUsed || config.defaultLogic,
    length: data.length,
  },
});

async function blackbox(text, logic, model) {
  try {
    const prompt = `${logic ? `${logic}\n` : ''}${text}`;
    const url = 'https://api.blackbox.ai/api/chat';
    const data = {
      "messages": [{ "role": "user", "content": prompt, "id": "QgaYVnl" }],
      "id": "ugrC6k4",
      "previewToken": null,
      "userId": null,
      "codeModelMode": true,
      "agentMode": {},
      "trendingAgentMode": {},
      "isMicMode": false,
      "userSystemPrompt": null,
      "maxTokens": 1024,
      "playgroundTopP": 0.9,
      "playgroundTemperature": 0.5,
      "isChromeExt": false,
      "githubToken": "",
      "clickedAnswer2": false,
      "clickedAnswer3": false,
      "clickedForceWebSearch": false,
      "visitFromDelta": false,
      "mobileClient": false,
      "userSelectedModel": null,
      "validated": "00f37b34-a166-4efb-bce5-1312d87f2f94"
    };
    const headers = { 'Content-Type': 'application/json' };
    const response = await axios.post(url, data, { headers });
    let result = response.data;
    result = result.replace("Generated by BLACKBOX.AI, try unlimited chat https://www.blackbox.ai", "").trim();
    return createSuccessResponse(result, model || "Blackbox", logic); 
  } catch (error) {
    console.error('Error processing with Blackbox:', error);
    throw new Error(`Blackbox Error: ${error.message}`);
  }
}

async function gemini(text, logic, model) {
  try {
    const Used_Apikey = process.env.GOOGLE_API_KEY;
    const genAI = new GoogleGenerativeAI(Used_Apikey);
    const systemLogic = logic || config.defaultLogic;
    const modell = genAI.getGenerativeModel({
      model: model || config.defaultModel,
      systemInstruction: systemLogic,
    });
    const resultp = await modell.generateContent(text);
    if (!resultp.response || !resultp.response.candidates || resultp.response.candidates.length === 0) {
      throw new Error("Respons dari layanan AI tidak valid. Mungkin API Gemini sedang down");
    }
    const responseText = resultp.response.candidates[0]?.content?.parts?.[0]?.text?.trimEnd() || "";
    return createSuccessResponse(responseText, model || config.defaultModel, logic);
  } catch (err) {
    console.error('Error processing with Gemini:', err);
    throw new Error(`Gemini Error: ${err.message}`);
  }
}

async function removebg(imageUrl) {
  try {
    const response = await fetch(imageUrl);
    if (!response.ok) throw new Error(`Gagal mengunduh gambar. Status: ${response.status}`);
    const media = await response.buffer();
    const base64Image = media.toString('base64');

    const form = new FormData();
    form.append('image_file_b64', base64Image);
    form.append('size', 'auto');

    const removebgResponse = await fetch('https://api.remove.bg/v1.0/removebg', {
      method: 'POST',
      headers: {
        'X-Api-Key': 'SgEo63fvZ7XaBWbbc3J925Hd', 
        ...form.getHeaders()
      },
      body: form
    });

    if (!removebgResponse.ok) {
      const errorData = await removebgResponse.json(); 
      const errorMessage = errorData.errors && errorData.errors[0] && errorData.errors[0].title 
                          ? errorData.errors[0].title 
                          : `HTTP error! status: ${removebgResponse.status}`;
      throw new Error(errorMessage);
    }

    return await removebgResponse.buffer(); 

  } catch (err) {
    console.error('Error Remove BG:', err);
    throw new Error(`Remove BG Error: ${err.message}`);
  }
}

module.exports = {
  blackbox,
  gemini,
  removebg,
};
